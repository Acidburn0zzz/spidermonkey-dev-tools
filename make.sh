#!/bin/sh

export TZ=America/Los_Angeles

arch_sel=
bld_sel=
cc_sel=
phase_sel=
aphase_sel=
kontinue=false
firefox=false
nspr=false
oomCheck=false
threadsafe=true
arg=$1; shift;
oldarg=
while test "$arg" != "$oldarg"; do
    case ${arg%%-*} in
        (x86|x64|arm) arch_sel="$arch_sel ${arg%%-*}";;
        (dbg|opt) bld_sel="$bld_sel ${arg%%-*}";;
        (gcc*) cc_sel="$cc_sel ${arg%%-*}";;
        (cfg|make|chk|run|runt|runi|chk?|regen) phase_sel="$phase_sel ${arg%%-*}";;
        (patch) aphase_sel="$aphase_sel ${arg%%-*}";;
        (k) kontinue=true;;
        (ff) firefox=true;;
        (nspr) nspr=true;;
        (oom) oomCheck=true;;
        (nts) threadsafe=false;;
        (*) echo 1>&2 "Unknown variation flag '$arg'.";
        exit 1;;
    esac
    oldarg=$arg
    arg=${arg#*-}
done

test -z "$arch_sel" && arch_sel="x64 x86"
test -z "$bld_sel" && bld_sel="dbg opt"
test -z "$cc_sel" && cc_sel="gcc45"
test -z "$phase_sel" && phase_sel="make"
phase_sel="$phase_sel $aphase_sel"

top_file(){
  local filename=$1
  local p=$2
  while test ! -r "$p/$filename"; do
    if test -z "$p"; then
      break;
    else
      p=${p%/*}
    fi
  done
  if test -r "$p/$filename"; then
    echo "$p/$filename"
  fi
}

export_front(){
    local env=$1
    echo "export $2=$3:\$$2" >> $env
}

export_last(){
    local env=$1
    echo "export $2=\$$2:$3" >> $env
}

export_list(){
  local cmd=$1
  local env=$2
  while read i; do
    case $i in
      *bin)    $cmd $env PATH $i;;
      */games) $cmd $env PATH $i;;
      */man)   $cmd $env MANPATH $i;;
      */include)
               $cmd $env INCLUDE $i;;
      */lib)
               $cmd $env LIBRARY_PATH $i;
               #$cmd $env LD_LIBRARY_PATH $i;
               #$cmd $env LD_RUN_PATH $i;
               ;;
      */aclocal*)
               $cmd $env ACLOCAL_PATH $i;;
      */pkgconfig)
               $cmd $env PKG_CONFIG_PATH $i;;
      */site_perl/*)
               $cmd $env PERLLIB $i;;
      */python*/site-packages)
               $cmd $env PYTHONPATH $i;;
      *) true;;
    esac
  done
}

# Used to unescape the '~' symbol and environment variables.
fulldir(){
  eval echo "$1"
}

regen_env(){
  local env=$1
  echo "Generate the new $env file, please wait ..."
  echo "#!/bin/sh" > $env
  echo "# This file has been generated by the 'set_env.sh' script." >> $env
  echo "# $(date)" >> $env

  local exp
  while read l; do # var:pos:dir@place
    local var=$(echo $l | sed 's,\(.*\):\(.\):\(.*\)@\(.*\),\1,')
    local pos=$(echo $l | sed 's,\(.*\):\(.\):\(.*\)@\(.*\),\2,')
    local dir=$(echo $l | sed 's,\(.*\):\(.\):\(.*\)@\(.*\),\3,')
    local loc=$(echo $l | sed 's,\(.*\):\(.\):\(.*\)@\(.*\),\4,')
    if test -z "$loc" -o "$WHEREAMI" = "$loc"; then
      case $pos in
        \^) exp="export_front";;
        \$) exp="export_last";;
         *) echo >&2 "unknow position character $exp, expected ^ or $.";
            exp="export_last";;
      esac
      dir=$(fulldir "$dir")
      echo "Generate $env: Visit '$dir'."
      if test -r "$dir"; then
        if test -n "$var"; then
          $exp $env $var "$dir"
        else
          find -L "$dir" -type d | export_list $exp $env
        fi
      fi
    fi
  done

  echo "Generation complete."
}

clean_env() {
  while read v; do
    export $v="";
  done <<EOF
PATH
MANPATH
INCLUDE
ACLOCAL_PATH
PKG_CONFIG_PATH
PERLLIB
PYTHONPATH
EOF
  unset LIBRARY_PATH
  unset LD_LIBRARY_PATH
  unset LD_RUN_PATH
}

regen_local_env() {
  local profile=$(top_file ".nix-profile" $1)
  regen_env "$(dirname $profile)/.env" <<EOF
PATH:$:/sbin@
:^:/var/run/current-system/sw@
PATH:^:/var/setuid-wrappers@
:^:$profile@
:^:~/.usr@
EOF
}

load_local_env() {
  local profile=$(top_file ".nix-profile" $1)
  local dir="${profile%/*}" # dirname
  local has_preinit=$(test -r "$dir/.preinit" && echo true || echo false)
  local has_init=$(test -r "$dir/.init" && echo true || echo false)

  clean_env
  export PROFILE_DIR=$dir
  if $has_preinit; then
    source "$dir/.preinit"
  fi
  source "$dir/.env"
  if $has_init; then
    source "$dir/.init"
  fi
}

failed=false

catch_failure() {
    reset='\e[0;0m'
    highlight='\e[0;31m'
    echo -e 1>&2 "error: ${highlight}Failed while building variant: $arch-$bld ($phase)${reset}"
    failed=true
    $kontinue || exit 1
}

run() {
    reset='\e[0;0m'
    highlight='\e[0;35m'
    echo -e 1>&2 "exec: ${highlight}$@${reset}"
    "$@"
    test $? -gt 0 && catch_failure
}

generate_patch() {
    if git st | grep -c '\(.M\|M.\)'; then
        echo 2>&1 "Please commit the changes and re-test."
        exit 1
    else
        tg patch -r ~/mozilla
    fi
}


gen_builddir() {
    if test \! -e "$builddir/../config.site"; then
        mkdir -p "$builddir"
        cd "$builddir/.."
        ln -s /nix/var/nix/profiles/per-user/nicolas/mozilla/profile-$cc-$arch .nix-profile
        regen_local_env $(pwd -L)
        cp $(top_file ".init" $buildtmpl) .
        cp $(top_file ".preinit" $buildtmpl) .
        cp $(top_file "config.site" $buildtmpl) .
        cd -
    fi
}

get_srcdir() {
    local source=$(top_file "configure.in" $(pwd -L))
    source=$(dirname "$source")
    echo $source
}

get_js_srcdir() {
    local source=$(get_srcdir)
    source=${source%/js/src}
    echo ${source}/js/src
}

# TODO use trap here !

for p in $phase_sel; do
    if test $p = regen; then
        PROFILE_NIX=/home/nicolas/mozilla/profile.nix
        nix-store -r $( nix-instantiate --show-trace $PROFILE_NIX) | \
            tee /dev/stderr | \
            tail -n $(nix-instantiate $PROFILE_NIX 2>/dev/null | wc -l) | \
            while read drv; do

            sum=$(echo $drv | sed 's,.*-profile-\([^-]*\)-\([^-]*\),\1:\2,')
            cc=${sum%:*}
            arch=${sum#*:}
            ln -sfT $drv /nix/var/nix/profiles/per-user/nicolas/mozilla/profile-$cc-$arch
        done
        exit 0
    fi
done

if $firefox || $nspr ; then
    srcdir=$(get_srcdir)
else
    srcdir=$(get_js_srcdir)
fi

cd $srcdir
if test -n "$BRANCH"; then
    branch=$BRANCH
elif branch=$(git symbolic-ref HEAD 2>/dev/null); then
    branch=${branch#*/*/}
elif branch=$(git rev-parse --short HEAD 2>/dev/null); then
    :
else
    branch=
fi
cd -

arch_max=$(echo $arch_sel | wc -w)
arch_cnt=1
for arch in $arch_sel; do

bld_max=$(echo $bld_sel | wc -w)
bld_cnt=1
for bld in $bld_sel; do

cc_max=$(echo $cc_sel | wc -w)
cc_cnt=1
for cc in $cc_sel; do

    buildspec=$arch/$cc/$bld
    builddirtop=$srcdir/_build/
    builddir=$srcdir/_build/${branch+$branch/}$buildspec
    instdir=$srcdir/_inst/${branch+$branch/}$buildspec
    shell=$srcdir/_build/js${branch+-$(basename "$branch")}-$bld-$arch-$cc
    buildtmpl=$HOME/mozilla/_build_tmpl/$buildspec
    oldarch=$arch
    test $arch = arm && arch=x64
    gen_builddir

    clean_env
    load_local_env "$builddir"
    export NIX_STRIP_DEBUG=0
    arch=$oldarch

    test -e "$builddir" || mkdir -p "$builddir"
    touch "$builddir/config.sum"
    phase_sel_case="$phase_sel"

    if test "$(md5sum "$srcdir/configure.in" | sed 's/ .*//')" != "$(cat "$builddirtop/config.sum")"; then
        phase_sel_case="autoconf cfg $phase_sel_case"
    elif test "$(cat "$builddir/config.sum")" != "$(cat "$builddirtop/config.sum")"; then
        phase_sel_case="cfg $phase_sel_case"
    fi

for phase in $phase_sel_case; do

    case $phase in
        (autoconf)
            # does that once for all builds.
            cd $srcdir;
            run autoconf
            md5sum "$srcdir/configure.in" | sed 's/ .*//' > "$builddirtop/config.sum"
            cd -
            ;;
        (cfg)
            conf_args=
            conf_args="$conf_args  --prefix=$instdir"
            if $firefox ; then
                conf_args="$conf_args --enable-application=browser" # --with-system-jpeg --with-system-zlib --with-system-bz2 --disable-crashreporter --disable-necko-wifi --disable-installer --disable-updater"
            elif $nspr ; then
                conf_args="$conf_args"
            else
                conf_args="$conf_args --enable-valgrind"
            fi

            if $oomCheck; then
                conf_args="$conf_args --enable-oom-backtrace"
            fi

            if $nspr ; then
                case $bld in
                    (dbg) conf_args="$conf_args --enable-debug=-ggdb3 --disable-optimize";;
                    (opt) conf_args="$conf_args --enable-optimize --disable-debug";;
                esac
            else
                # Thread safeness, to avoid silly compression times.
                if ! $firefox; then
                    if $threadsafe ; then
                        conf_args="$conf_args --enable-threadsafe --with-system-nspr --with-nspr-prefix=$(top_file "nsprpub" $srcdir)/_inst/mc/$buildspec"
                    else
                        conf_args="$conf_args --disable-threadsafe"
                    fi
                fi

                case $bld in
                    (dbg) conf_args="$conf_args --enable-debug=-ggdb3 --enable-debug-symbols --disable-elf-hack --disable-optimize";;
                    (opt) conf_args="$conf_args --enable-optimize --disable-debug --enable-debug-symbols=-ggdb3";; #  --enable-profiling";;
                esac
            fi

            case $arch in
                (x64)
                  ## We need this for nspr to avoid looking for stubs-32.h of
                  ## the glibc.
                  if $nspr ; then
                      conf_args="$conf_args --enable-64bit"
                  fi;;
                (x86) conf_args="$conf_args i686-unknown-linux-gnu";;
                (arm) conf_args="$conf_args armv7l-unknown-linux-gnueabi"
                continue;;
            esac

            phase="configure"
            cd $builddir;
            run "$srcdir/configure" $conf_args
            cd -
            cp "$builddirtop/config.sum" "$builddir/config.sum"
            ;;

        (make)
            case $arch in
                (arm)
                    export PATH=$PATH:$HOME/.nix-profile/bin
                    archive="$builddir/src.tgz"
                    run echo "git-archive ..."
                    git archive -o "$archive" --prefix=src/ --remote "$srcdir/../../" HEAD || exit 1
                    case $bld in
                        (dbg)
                            attr=jsBuild
                            ;;
                        (opt)
                            attr=jsOptBuild
                            ;;
                    esac
                    run echo "nix-instantiate ..."
                    drv=$(echo '(import /home/nicolas/mozilla/sync-repos/release.nix { ionmonkeySrc = '"$builddir/src.tgz"'; }).'"$attr"' { system = "armv7l-linux"; }' | nix-instantiate -I /home/nicolas/mozilla - || exit 2)
                    run echo "nix-store -r ..."
                    store=$(nix-store -r $drv || exit 3)
                    ln -sf $store "$builddir/result"
                    run ln -sf "$builddir/result/bin/js" "$builddir/js"
                    ;;
                (*)
                    LC_ALL=C run make -C "$builddir" "$@"
                    ;;
            esac

            if $firefox || $nspr; then
                LC_ALL=C run make -C "$builddir" install "$@"
            else
                ln -sf  "$builddir/js" "$shell"
            fi
            ;;

        (chk)
            LC_ALL=C run make -C "$builddir" check "$@"
            ;;

        (chki)
            # check ion test directory.
            #LC_ALL=C run make -C "$builddir" check-ion-test "$@"
            run python $srcdir/jit-test/jit_test.py --ion-tbpl --no-slow "$shell" ion
            ;;

        (chka)
            # check ion test directory.
            #LC_ALL=C run make -C "$builddir" check-ion-test "$@"
            chkaOpt=""
            if test -e $srcdir/ion/x86; then
                chkaOpt="$chkaOpt --ion"
            fi
            kontinue_save=$kontinue
            kontinue=true

            if $firefox ; then
                # TEST_PATH='/tests/MochiKit-1.4.2/tests/test_MochiKit-Style.html' EXTRA_TEST_ARGS='--debugger=gdb' make mochitest-plain
                LC_ALL=C run make -C "$builddir" mochitest-plain
            else
                run python $srcdir/tests/jstests.py -t 10 $(readlink "$shell")
                run python $srcdir/jit-test/jit_test.py $chkaOpt --no-slow "$shell"
            fi

            kontinue=$kontinue_save
            ;;

        (chkt)
            run python $srcdir/jit-test/jit_test.py --ion -s -o "$shell" "$@"
            ;;

        (run)
            if $firefox ; then
              run "$builddir/dist/bin/firefox" "$@"
            else
              run "$shell" "$@"
            fi
            ;;

        (runt)
            args=""
            tests=""
            debug=""
            for i in $@; do
                case "$i" in
                    (-g) debug="-g";;
                    (-*) args="$args $i";;
                    (*) tests="$tests $i";;
                esac
            done
            run python $srcdir/jit-test/jit_test.py -w /dev/null --no-progress --write-failure-output -o --jitflags="" --args="$args" "$shell" $tests $debug
            ;;

        (runi)
            phase="runi interp"
            run "$shell" "$@"
            failed=false
            kontinue_save=$kontinue
            kontinue=true
            empty_opt=
            for mode in none eager; do
                mode_opt=$empty_opt
                test $mode = infer && mode_opt="$mode_opt"
                test $mode = eaginf && mode_opt="$mode_opt --ion-eager"
            for jmmode in none enabled eager; do
                jmmode_opt=$mode_opt
                test $jmmode = none && jmmode_opt="$jmmode_opt --no-jm"
                test $jmmode = enabled && jmmode_opt="$jmmode_opt"
                test $jmmode = eager && jmmode_opt="$jmmode_opt -a"
            for timode in with without; do
                timode_opt=$jmmode_opt
                test $timode = with && timode_opt="$timode_opt"
                test $timode = without && timode_opt="$timode_opt --no-ti"
            for gvn in off pessimistic optimistic; do
                gvn_opt=$timode_opt
                test $gvn != optimistic && gvn_opt="$gvn_opt --ion-gvn=$gvn"
            for licm in off on; do
                licm_opt=$gvn_opt
                test $licm != on && licm_opt="$licm_opt --ion-licm=$licm"
            for ra in greedy lsra; do
                ra_opt=$licm_opt
                test $ra != lsra && ra_opt="$ra_opt --ion-regalloc=$ra"
            for inline in on off; do
                inline_opt=$ra_opt
                test $inline != on && inline_opt="$inline_opt --ion-inlining=$inline"
            for osr in on off; do
                osr_opt=$inline_opt
                test $osr != on && osr_opt="$osr_opt --ion-osr=$osr"

            opt=$osr_opt
            phase="runi ion mode=$mode gvn=$gvn licm=$licm regalloc=$ra inlining=$inline osr=$osr"
            run "$shell" $opt "$@"

            done
            done
            done
            done
            done
            done
            done
            done
            phase="runi"
            kontinue=$kontinue_save
            ;;

        (patch)
            if test $arch_cnt -eq $arch_max -a $bld_cnt -eq $bld_max -a $cc_cnt -eq $cc_max; then
                cd $srcdir;
                run generate_patch
                cd -
            fi
            ;;
    esac

done # phase
done # cc
done # bld
done # arch

exit 0
